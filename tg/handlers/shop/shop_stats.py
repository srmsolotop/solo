import seaborn as sns
import pandas as pd
import matplotlib.pyplot as plt
import io
from aiogram import Router, F, Bot
from asgiref.sync import sync_to_async
from ...models import Shop, ShopReview, TelegramUser
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton
from aiogram import types
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
router = Router()
from datetime import datetime, timedelta
from django.utils import timezone
from aiogram.enums.parse_mode import ParseMode
import re


async def shop_statistics_generator():
    shops = await sync_to_async(Shop.objects.all)()
    titles = [re.sub(r'[^\w\s]', '', shop.title) for shop in shops]
    data = {
        '–ù–∞–∑–≤–∞–Ω–∏–µ': titles,
        '–û—Ç–∫–ª–∏–∫–∏': [shop.reviews for shop in shops],
    }
    df = pd.DataFrame(data)
    plt.figure(figsize=(12, 8))
    sns.barplot(x='–û—Ç–∫–ª–∏–∫–∏', y='–ù–∞–∑–≤–∞–Ω–∏–µ', data=df, palette='viridis', width=0.5, hue='–ù–∞–∑–≤–∞–Ω–∏–µ', dodge=False, legend=False)
    # sns.barplot(x='–û—Ç–∫–ª–∏–∫–∏', y='–ù–∞–∑–≤–∞–Ω–∏–µ', data=df, orient='h', width=0.5, dodge=False)

    plt.xlabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫–ª–∏–∫–æ–≤', fontsize=14)
    plt.ylabel('SHOPS', fontsize=14)
    plt.title('–û—Ç–∫–ª–∏–∫–∏ –≤ –º–∞–≥–∞–∑–∏–Ω–∞—Ö', fontsize=16)
    plt.grid(True)

    for index, value in enumerate(df['–û—Ç–∫–ª–∏–∫–∏']):
        plt.text(value, index, str(value))
    plt.rcParams['font.weight'] = 'bold'
    plt.rcParams['font.family'] = "Playfair Display"

    plt.tight_layout()
    buffer = io.BytesIO()
    plt.savefig(buffer, format='png')
    buffer.seek(0)
    plt.close()
    return buffer


async def date_time_stats(shop, days):
    today = timezone.now()
    days_ago = today - timedelta(days=days)
    result = ShopReview.objects.filter(shop=shop, created_at__gte=days_ago, created_at__lte=today)
    return result


@router.callback_query(F.data == "shop_statistics")
async def shop_statistics(callback_query: CallbackQuery, bot: Bot):
    await callback_query.message.delete()
    user = await sync_to_async(TelegramUser.objects.get)(user_id=callback_query.from_user.id)
    if user.is_shop:
        buffer = await shop_statistics_generator()
        input_file = types.BufferedInputFile(buffer.getvalue(), filename="chart.png")
        try:
            shop = await sync_to_async(Shop.objects.get)(owner=user)
        except Exception as e:
            print(e)

        text = f"    üê™Silk Road Statisticsüê™\nüíØ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –≤–∞–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –∏–∑ SRM\n\n„ÄΩ{shop.title}„ÄΩ\n\n"
        text += f"üå† *–ó–∞ –≤—Å—ë –≤—Ä–µ–º—è* ‚è¨\n‚ûñ`{shop.reviews}` _–ø–µ—Ä–µ—Ö–æ–¥–æ–≤_\n\n"
        text += f"üéÜ *–ó–∞ 30 –¥–Ω–µ–π* ‚è¨\n‚ûñ `{len(await date_time_stats(shop, 30))}` _–ø–µ—Ä–µ—Ö–æ–¥–æ–≤_\n\n"
        text += f"üéá *–ó–∞ 7 –¥–Ω–µ–π* ‚è¨\n‚ûñ `{len(await date_time_stats(shop, 7))}` _–ø–µ—Ä–µ—Ö–æ–¥–æ–≤_\n\n"
        text += f"‚òÄ *–ó–∞ —Å–µ–≥–æ–¥–Ω—è* ‚è¨\n‚ûñ `{len(await date_time_stats(shop, 1))}` _–ø–µ—Ä–µ—Ö–æ–¥–æ–≤_\n\n"

        text += (f"_- –ù–∏–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—â–∏—â–µ–Ω–∞ –æ—Ç –Ω–∞–∫—Ä—É—Ç–∫–∏, "
                 f"–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å –∫ –≤–∞—à–µ–º—É –º–∞–≥–∞–∑–∏–Ω—É. –ß—Ç–æ –±—ã –µ–≥–æ —É–≤–µ–ª–∏—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–Ω–æ–Ω—Å –≤ –±–æ—Ç–µ_.")

        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(text="üéÜ –ó–∞ 30 –¥–Ω–µ–π", callback_data=f"shopstats_30_{shop.id}"))
        builder.add(InlineKeyboardButton(text="üéá –ó–∞ 7 –¥–Ω–µ–π", callback_data=f"shopstats_7_{shop.id}"))
        builder.add(InlineKeyboardButton(text="‚òÄ –ó–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data=f"shopstats_1_{shop.id}"))
        builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"back"))
        builder.adjust(1)

        await bot.send_photo(callback_query.from_user.id, photo=input_file, caption=text, reply_markup=builder.as_markup(),
                             parse_mode=ParseMode.MARKDOWN)


@router.callback_query(F.data.startswith("shopstats"))
async def show_users_stats(callback_query: CallbackQuery):
    data = callback_query.data.split("_")
    days = int(data[1])
    shop_id = data[2]

    try:
        shop = await sync_to_async(Shop.objects.get)(id=shop_id)
        user = await sync_to_async(TelegramUser.objects.get)(user_id=callback_query.from_user.id)
        if shop.owner == user:
            reviews = await date_time_stats(shop, days)
            if reviews:
                text = f'üìç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–µ—Ä–µ—à–µ–¥—à–∏–µ –∫ –≤–∞–º –∑–∞ {str(days) + " –¥–Ω–µ–π" if days > 1 else "—Å–µ–≥–æ–¥–Ω—è"} \n\n'
                for num, i in enumerate(reviews):
                    text += f'{num+1}. {"@"+i.user.username if i.user.username else i.user.user_id}\n'
                await callback_query.message.answer(text)
            else:
                await callback_query.message.answer("üí° –£ –≤–∞—Å –Ω–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –∑–∞ –¥–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥, –ø—Ä–æ—è–≤–ª—è–π—Ç–µ –±–æ–ª—å—à–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —á–∞—Ç–µ")
    except Exception as e:
        print(e)

